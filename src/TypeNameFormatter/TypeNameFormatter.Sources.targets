<?xml version="1.0" encoding="utf-8" ?>
<Project InitialTargets="_TypeNameFormatterCopy" TreatAsLocalProperty="IsCompatibleWithProject;SourceFolder">

  <!-- Public properties -->
  <PropertyGroup>
    <TypeNameFormatterInternal Condition="'$(TypeNameFormatterInternal)' == ''">True</TypeNameFormatterInternal>
    <TypeNameFormatterProjectNodeName Condition="'$(TypeNameFormatterProjectNodeName)' == ''">TypeNameFormatter.cs</TypeNameFormatterProjectNodeName>
  </PropertyGroup>

  <!-- Private properties -->
  <PropertyGroup>
    <IsCompatibleWithProject Condition="'$(Language)' == 'C#'">True</IsCompatibleWithProject>
    <SourceFolder>$(MSBuildThisFileDirectory)</SourceFolder>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsCompatibleWithProject)">
    <DefineConstants Condition="$(TypeNameFormatterInternal)">TYPENAMEFORMATTER_INTERNAL;$(DefineConstants)</DefineConstants>
    <DefineConstants Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(TargetFramework), `^net(coreapp|standard)1`))">TYPENAMEFORMATTER_USE_SEMIBROKEN_REFLECTION;$(DefineConstants)</DefineConstants>
  </PropertyGroup>

  <!-- The source files are copied from the user's NuGet package cache over to the project's intermediate output directory.
       This protects the original files against accidental changes that would affect all referencing projects,
       while at the same time still keeping it out of source control's sight.
       Executing after 'PrepareForBuild' means that the intermediate output directory should've been created. -->
  <Target Name="_TypeNameFormatterCopy"
          Condition="$(IsCompatibleWithProject)"
          AfterTargets="PrepareForBuild"
          BeforeTargets="CoreCompile"
          Inputs="$(SourceFolder)TypeNameFormatter.cs"
          Outputs="$(IntermediateOutputPath)TypeNameFormatter.cs">
    <Copy SourceFiles="$(SourceFolder)TypeNameFormatter.cs" DestinationFolder="$(IntermediateOutputPath)" OverwriteReadOnlyFiles="true" />
  </Target>

  <!-- It would be nice to completely hide TypeNameFormatter files from the solution explorer. This could be done
       by putting the item group inside a target which CoreCompile is made to depend on; however, that solution does not
       work well e.g. in Rider, whose IDE code analysis and completion features only discover files that are included
       outside of any target. -->
  <ItemGroup Condition="$(IsCompatibleWithProject)">
    <Compile Include="$(IntermediateOutputPath)TypeNameFormatter.cs">
      <AutoGen>true</AutoGen>
      <Link Condition="'$(TypeNameFormatterProjectNodeName)' != ''">$(TypeNameFormatterProjectNodeName)</Link>
      <Visible Condition="'$(TypeNameFormatterProjectNodeName)' == 'TypeNameFormatter.cs'">false</Visible>
    </Compile>
  </ItemGroup>

</Project>
